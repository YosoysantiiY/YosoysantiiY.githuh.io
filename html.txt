<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>UNITY</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tone/14.8.49/Tone.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .profile-pic {
            width: 48px;
            height: 48px;
            object-fit: cover;
        }
        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }
        .timer-pulse {
            animation: pulse 1s infinite;
        }
    </style>
</head>
<body class="bg-slate-900">
    <!-- Modal de Autenticación: se muestra cuando el usuario no ha iniciado sesión -->
    <div id="auth-modal" class="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center p-4 z-50">
        <div class="bg-white p-8 rounded-xl shadow-2xl max-w-sm w-full flex flex-col space-y-6 transform transition-transform duration-300 scale-95">
            <h2 class="text-2xl font-bold text-gray-800 text-center">¡Bienvenido a UNITY!</h2>
            <p class="text-center text-gray-600">Inicia sesión o regístrate para continuar.</p>
            <div class="flex flex-col space-y-4">
                <input type="text" id="auth-name" placeholder="Tu nombre" class="w-full p-3 border-2 border-blue-200 rounded-md text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                <input type="email" id="auth-email" placeholder="Correo electrónico" class="w-full p-3 border-2 border-blue-200 rounded-md text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                <input type="password" id="auth-password" placeholder="Contraseña" class="w-full p-3 border-2 border-blue-200 rounded-md text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                <select id="auth-gender" class="w-full p-3 border-2 border-blue-200 rounded-md text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option value="" disabled selected>Elige tu género</option>
                    <option value="male">Hombre</option>
                    <option value="female">Mujer</option>
                </select>
                <button id="login-btn" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transform transition-transform duration-200 hover:scale-105">Iniciar Sesión</button>
                <button id="register-btn" class="w-full bg-blue-400 hover:bg-blue-500 text-white font-bold py-3 px-6 rounded-lg shadow-lg transform transition-transform duration-200 hover:scale-105">Registrarse</button>
            </div>
            <p id="auth-message" class="text-center text-sm font-medium"></p>
        </div>
    </div>

    <!-- Contenedor principal del juego: visible solo después de la autenticación -->
    <div id="game-container" class="min-h-screen flex flex-col items-center p-4 transition-all hidden">
        <!-- Encabezado del juego -->
        <header class="w-full max-w-7xl flex flex-col md:flex-row justify-between items-center bg-blue-800 text-white rounded-xl p-6 shadow-2xl mb-8">
            <div class="flex items-center space-x-4 mb-4 md:mb-0">
                <svg width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M12 2L2 7V17L12 22L22 17V7L12 2Z" stroke="currentColor" stroke-width="2" stroke-linejoin="round"/>
                    <path d="M2 7L12 12L22 7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    <path d="M12 12V22" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <div class="text-center md:text-left">
                    <h1 class="text-4xl font-bold tracking-tight text-white">Juego de Matemáticas e Inglés</h1>
                    <p class="text-sm text-blue-200 italic mt-1">¡Modo Multijugador!</p>
                </div>
            </div>
            <div class="flex flex-col md:flex-row items-center space-x-4">
                <span id="user-name-display" class="font-mono text-white text-lg font-bold"></span>
                <span id="user-email-display" class="font-mono text-blue-200 text-sm"></span>
                <button id="logout-btn" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-lg shadow-md transform transition-transform duration-200 hover:scale-105">Cerrar Sesión</button>
            </div>
        </header>

        <!-- Contenedor dinámico: aquí se carga el lobby, la sala o la partida en curso -->
        <div id="dynamic-content" class="w-full max-w-lg bg-gray-800 text-white rounded-xl p-8 shadow-2xl overflow-auto text-center" style="min-height: 400px;">
            <!-- Contenido dinámico (lobby, sala, juego) se renderizará aquí -->
        </div>
    </div>

    <!-- Botón de control de música flotante -->
    <div id="music-controls" class="fixed bottom-4 right-4 z-40">
        <button id="music-toggle-btn" class="bg-gray-800 text-white p-3 rounded-full shadow-lg transform transition-transform duration-200 hover:scale-110">
            <!-- Icono de altavoz con ondas de sonido -->
            <svg id="music-icon-playing" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 0 010 12.728m-2.828-9.9a5 0 010 7.072M8 12H4m0 0v-4m0 4v4m4-4h4"/>
            </svg>
            <!-- Icono de altavoz silenciado (oculto por defecto) -->
            <svg id="music-icon-paused" xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 0 010 7.072m2.828-9.9a9 0 010 12.728M4 12H2m0 0v-4m0 4v4m2-4h4"/>
                <line x1="8" y1="12" x2="16" y2="12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
            </svg>
        </button>
    </div>

    <!-- Custom Message Box: para mostrar mensajes en lugar de alerts -->
    <div id="message-box" class="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center p-4 z-50 hidden">
        <div class="bg-white p-6 rounded-xl shadow-2xl max-w-sm w-full text-center">
            <p id="message-text" class="text-lg font-bold text-gray-800 mb-4"></p>
            <button id="message-ok-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg">OK</button>
        </div>
    </div>
    
    <!-- Scripts de Firebase y lógica de la aplicación -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInWithEmailAndPassword, createUserWithEmailAndPassword, onAuthStateChanged, signOut, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, doc, onSnapshot, getDoc, collection, addDoc, updateDoc, query, where, getDocs, setDoc, arrayUnion } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

        // Variables globales de Firebase y del juego
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
        
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        // Referencias del DOM
        const authModal = document.getElementById('auth-modal');
        const gameContainer = document.getElementById('game-container');
        const userNameDisplay = document.getElementById('user-name-display');
        const userEmailDisplay = document.getElementById('user-email-display');
        const logoutBtn = document.getElementById('logout-btn');
        const authNameInput = document.getElementById('auth-name');
        const authEmailInput = document.getElementById('auth-email');
        const authPasswordInput = document.getElementById('auth-password');
        const authGenderSelect = document.getElementById('auth-gender');
        const loginBtn = document.getElementById('login-btn');
        const registerBtn = document.getElementById('register-btn');
        const authMessage = document.getElementById('auth-message');
        const dynamicContent = document.getElementById('dynamic-content');

        const messageBox = document.getElementById('message-box');
        const messageText = document.getElementById('message-text');
        const messageOkBtn = document.getElementById('message-ok-btn');

        // Referencias del DOM para la música
        const musicToggleBtn = document.getElementById('music-toggle-btn');
        const musicIconPlaying = document.getElementById('music-icon-playing');
        const musicIconPaused = document.getElementById('music-icon-paused');
        
        let userId = null;
        let userEmail = null;
        let userName = null;
        let userGender = null;
        let currentGameId = null;
        let gameData = null;
        let gameListenerUnsubscribe = null;
        let friendListenerUnsubscribe = null;
        let chatListenerUnsubscribe = null;
        let myProfileListenerUnsubscribe = null;
        let gameTimerInterval = null;
        let practiceState = {
            active: false,
            mode: null,
            score: 0,
            level: 1,
            problem: null,
            answer: null
        };
        
        const englishVocabulary = [
            { question: "Traduce 'cat'", answer: "gato", options: ["perro", "pájaro", "gato"] },
            { question: "Traduce 'dog'", answer: "perro", options: ["gato", "perro", "pez"] },
            { question: "Traduce 'house'", answer: "casa", options: ["coche", "casa", "árbol"] },
            { question: "Traduce 'car'", answer: "coche", options: ["bici", "coche", "autobús"] },
            { question: "Traduce 'sun'", answer: "sol", options: ["luna", "estrellas", "sol"] },
            { question: "Traduce 'water'", answer: "agua", options: ["fuego", "agua", "aire"] },
            { question: "Traduce 'book'", answer: "libro", options: ["lápiz", "libro", "papel"] },
            { question: "Traduce 'apple'", answer: "manzana", options: ["plátano", "manzana", "naranja"] },
        ];

        // --- Lógica de la música de fondo ---
        let synth = null;
        let loop = null;
        let musicPlaying = false;
        let hasInteracted = false;

        function initMusic() {
            if (synth) return;
            
            synth = new Tone.PolySynth(Tone.Synth, {
                oscillator: { type: "sine" },
                envelope: {
                    attack: 2,
                    decay: 1,
                    sustain: 0.5,
                    release: 5
                }
            }).toDestination();
            
            const notes = ["C3", "E3", "G3"];

            loop = new Tone.Loop(time => {
                synth.triggerAttackRelease(notes, "4m", time);
            }, "8m").start(0);
        }

        function toggleMusic() {
            if (!hasInteracted) {
                Tone.start();
                initMusic();
                Tone.Transport.start();
                musicPlaying = true;
                hasInteracted = true;
            } else {
                if (musicPlaying) {
                    Tone.Transport.stop();
                    musicPlaying = false;
                } else {
                    Tone.Transport.start();
                    musicPlaying = true;
                }
            }
            updateMusicButtonIcon();
        }

        function updateMusicButtonIcon() {
            if (musicPlaying) {
                musicIconPlaying.classList.remove('hidden');
                musicIconPaused.classList.add('hidden');
            } else {
                musicIconPlaying.classList.add('hidden');
                musicIconPaused.classList.remove('hidden');
            }
        }
        
        musicToggleBtn.addEventListener('click', toggleMusic);

        function showMessage(text) {
            messageText.textContent = text;
            messageBox.classList.remove('hidden');
        }

        messageOkBtn.addEventListener('click', () => {
            messageBox.classList.add('hidden');
        });
        
        function getProfilePhoto(gender) {
            const size = 128;
            if (gender === 'male') {
                return `https://placehold.co/${size}x${size}/2563eb/ffffff?text=👨`;
            } else if (gender === 'female') {
                return `https://placehold.co/${size}x${size}/f472b6/ffffff?text=👩`;
            }
            return `https://placehold.co/${size}x${size}/6b7280/ffffff?text=👤`;
        }
        
        // Función de validación de correo electrónico simple
        const isValidEmail = (email) => {
            return /\S+@\S+\.\S+/.test(email);
        };

        async function registerWithEmail() {
            const name = authNameInput.value.trim();
            const email = authEmailInput.value;
            const password = authPasswordInput.value;
            const gender = authGenderSelect.value;
            
            if (!name || !email || !password || !gender) {
                authMessage.textContent = "Por favor, completa todos los campos.";
                return;
            }
            if (!isValidEmail(email)) {
                authMessage.textContent = "Por favor, introduce un correo electrónico válido.";
                return;
            }
            if (password.length < 6) {
                authMessage.textContent = "La contraseña debe tener al menos 6 caracteres.";
                return;
            }
            try {
                const userCredential = await createUserWithEmailAndPassword(auth, email, password);
                await setDoc(doc(db, `artifacts/${appId}/public/data/profiles`, userCredential.user.uid), {
                    name,
                    email,
                    gender,
                    friends: [],
                    friendRequests: []
                });
                showMessage("Registro exitoso. ¡Bienvenido!");
            } catch (error) {
                console.error("Error al registrarse:", error);
                authMessage.textContent = "Error al registrarse. Puede que el correo ya esté en uso o la contraseña sea débil.";
            }
        }

        async function loginWithEmail() {
            const email = authEmailInput.value;
            const password = authPasswordInput.value;
            
            if (!email || !password) {
                authMessage.textContent = "Por favor, introduce tu correo electrónico y contraseña.";
                return;
            }
             if (!isValidEmail(email)) {
                authMessage.textContent = "Por favor, introduce un correo electrónico válido.";
                return;
            }
            
            try {
                await signInWithEmailAndPassword(auth, email, password);
            } catch (error) {
                console.error("Error al iniciar sesión:", error);
                authMessage.textContent = "Error al iniciar sesión. Verifica tu correo y contraseña.";
            }
        }

        async function signOutUser() {
            try {
                await signOut(auth);
                location.reload();
            } catch (error) {
                console.error("Error al cerrar sesión:", error);
            }
        }

        onAuthStateChanged(auth, async (user) => {
            if (user) {
                userId = user.uid;
                userEmail = user.email;
                
                const profileRef = doc(db, `artifacts/${appId}/public/data/profiles`, userId);
                const profileSnap = await getDoc(profileRef);
                if (profileSnap.exists()) {
                    const profileData = profileSnap.data();
                    userName = profileData.name;
                    userGender = profileData.gender;
                    userNameDisplay.textContent = `Hola, ${userName}`;
                    userEmailDisplay.textContent = `Correo: ${userEmail}`;
                }

                authModal.classList.add('hidden');
                gameContainer.classList.remove('hidden');
                renderLobby();
            } else {
                if (initialAuthToken) {
                     signInWithCustomToken(auth, initialAuthToken).catch(error => {
                        console.error("Error en la autenticación inicial con token:", error);
                        authModal.classList.remove('hidden');
                        gameContainer.classList.add('hidden');
                     });
                 } else {
                     authModal.classList.remove('hidden');
                     gameContainer.classList.add('hidden');
                 }
            }
        });

        loginBtn.addEventListener('click', loginWithEmail);
        registerBtn.addEventListener('click', registerWithEmail);
        logoutBtn.addEventListener('click', signOutUser);

        function generateMathProblem(level) {
            let num1, num2, num3, problem, answer;
            const operators = ['+', '-', '*'];

            if (level <= 10) {
                num1 = Math.floor(Math.random() * 10) + 1;
                num2 = Math.floor(Math.random() * 10) + 1;
                if (Math.random() > 0.5) {
                    problem = `${num1} + ${num2}`;
                    answer = num1 + num2;
                } else {
                    if (num1 < num2) [num1, num2] = [num2, num1];
                    problem = `${num1} - ${num2}`;
                    answer = num1 - num2;
                }
            } else if (level <= 20) {
                num1 = Math.floor(Math.random() * 20) + 1;
                num2 = Math.floor(Math.random() * 10) + 1;
                if (Math.random() > 0.5) {
                    problem = `${num1} * ${num2}`;
                    answer = num1 * num2;
                } else {
                    num1 = num1 * num2;
                    problem = `${num1} / ${num2}`;
                    answer = num1 / num2;
                }
            } else if (level <= 30) {
                const op1 = operators[Math.floor(Math.random() * operators.length)];
                const op2 = operators[Math.floor(Math.random() * operators.length)];
                num1 = Math.floor(Math.random() * 20) + 1;
                num2 = Math.floor(Math.random() * 10) + 1;
                num3 = Math.floor(Math.random() * 5) + 1;
                
                let result1;
                if (op1 === '+') result1 = num1 + num2;
                else if (op1 === '-') result1 = num1 - num2;
                else result1 = num1 * num2;

                if (op2 === '+') answer = result1 + num3;
                else if (op2 === '-') answer = result1 - num3;
                else answer = result1 * num3;
                
                problem = `(${num1} ${op1} ${num2}) ${op2} ${num3}`;
            } else {
                let a, b, c, x;
                const algebraType = Math.floor(Math.random() * 3);
                
                if (algebraType === 0) {
                    a = Math.floor(Math.random() * 5) + 2;
                    b = Math.floor(Math.random() * 20) - 10;
                    x = Math.floor(Math.random() * 10) + 1;
                    c = a * x + b;
                    problem = `${a}x + ${b} = ${c}`;
                    answer = x;
                } else if (algebraType === 1) {
                    a = Math.floor(Math.random() * 5) + 2;
                    b = Math.floor(Math.random() * 20) - 10;
                    x = Math.floor(Math.random() * 10) + 1;
                    c = a * x - b;
                    problem = `${a}x - ${b} = ${c}`;
                    answer = x;
                } else {
                    a = Math.floor(Math.random() * 5) + 2;
                    b = Math.floor(Math.random() * 10) - 5;
                    x = (Math.floor(Math.random() * 10) + 1) * a;
                    c = x / a + b;
                    problem = `x / ${a} + ${b} = ${c}`;
                    answer = x;
                }
            }
            return { problem, answer };
        }
        
        function generateEnglishProblem() {
            const problem = englishVocabulary[Math.floor(Math.random() * englishVocabulary.length)];
            const options = [...problem.options].sort(() => Math.random() - 0.5); // Shuffle options
            return { question: problem.question, answer: problem.answer, options: options };
        }
        
        // Función para limpiar la partida actual y volver al lobby
        function goBackToLobby() {
            if (gameListenerUnsubscribe) {
                gameListenerUnsubscribe();
                gameListenerUnsubscribe = null;
            }
            if (gameTimerInterval) {
                clearInterval(gameTimerInterval);
                gameTimerInterval = null;
            }
            if (chatListenerUnsubscribe) {
                chatListenerUnsubscribe();
                chatListenerUnsubscribe = null;
            }
            currentGameId = null;
            gameData = null;
            practiceState.active = false;
            renderLobby();
        }

        // RENDER: Pantalla del lobby
        async function renderLobby() {
            // Lógica de corrección: Asegurarse de que los datos del perfil existen.
            const myProfileRef = doc(db, `artifacts/${appId}/public/data/profiles`, userId);
            const myProfileSnap = await getDoc(myProfileRef);
            const myProfileData = myProfileSnap.exists() ? myProfileSnap.data() : {};
            const friends = myProfileData.friends || [];
            const friendRequests = myProfileData.friendRequests || [];

            let friendsListHtml = '<p class="text-sm text-gray-400 text-center">No tienes amigos todavía.</p>';
            if (friends.length > 0) {
                const friendsPromises = friends.map(friendId => getDoc(doc(db, `artifacts/${appId}/public/data/profiles`, friendId)));
                const friendsSnapshots = await Promise.all(friendsPromises);
                friendsListHtml = friendsSnapshots.map(friendSnap => {
                    const friendData = friendSnap.data();
                    const friendId = friendSnap.id;
                    const profilePicUrl = getProfilePhoto(friendData.gender);
                    return `
                        <div class="flex items-center justify-between p-2 border-b last:border-b-0 border-gray-600">
                            <div class="flex items-center space-x-2">
                                <img src="${profilePicUrl}" alt="Foto de perfil de ${friendData.name}" class="rounded-full profile-pic">
                                <span class="font-bold text-white">${friendData.name}</span>
                            </div>
                            <button class="start-chat-btn bg-blue-500 hover:bg-blue-600 text-white text-sm px-2 py-1 rounded-md" data-friend-id="${friendId}" data-friend-name="${friendData.name}" data-friend-gender="${friendData.gender}">Chatear</button>
                        </div>
                    `;
                }).join('');
            }
            
            let requestsListHtml = '<p class="text-sm text-gray-400 text-center">No hay solicitudes pendientes.</p>';
            if (friendRequests.length > 0) {
                requestsListHtml = friendRequests.map(req => `
                    <div class="flex items-center justify-between p-2 border-b last:border-b-0 border-gray-600">
                        <div class="flex items-center space-x-2">
                            <img src="${getProfilePhoto(req.gender)}" alt="Foto de perfil de ${req.name}" class="rounded-full profile-pic">
                            <span class="text-white">${req.name}</span>
                        </div>
                        <button class="accept-friend-btn bg-green-500 hover:bg-green-600 text-white text-sm px-2 py-1 rounded-md" data-user-id="${req.userId}">Aceptar</button>
                    </div>
                `).join('');
            }


            dynamicContent.innerHTML = `
                <h3 class="text-3xl font-bold text-white mb-6">Lobby del juego</h3>
                <p class="text-gray-300 mb-8">Selecciona un modo de juego para empezar.</p>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <!-- Columna Izquierda: Modos de Juego -->
                    <div class="flex flex-col space-y-4">
                        <!-- Sección Multijugador -->
                        <div class="bg-blue-900 bg-gradient-to-br from-blue-900 to-indigo-900 p-6 rounded-lg shadow-xl border border-blue-700">
                            <h4 class="text-2xl font-bold text-white mb-4 italic tracking-wide text-center">¡Modo Multijugador!</h4>
                            <p class="text-sm text-blue-200 mb-4 text-center">Compite en equipos contra otros 3 jugadores.</p>
                            <div class="flex flex-col space-y-2 text-left mb-4">
                                <label for="mode-select" class="text-lg font-semibold text-white">Selecciona el modo de juego:</label>
                                <select id="mode-select" class="w-full p-3 border-2 border-blue-200 rounded-md text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    <option value="math">Matemáticas</option>
                                    <option value="english">Inglés</option>
                                </select>
                            </div>
                            <div class="flex flex-col space-y-2 text-left">
                                <label for="difficulty-select" class="text-lg font-semibold text-white">Selecciona la dificultad:</label>
                                <select id="difficulty-select" class="w-full p-3 border-2 border-blue-200 rounded-md text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                    <option value="easy">Fácil (Nivel 1-10)</option>
                                    <option value="medium">Medio (Nivel 11-20)</option>
                                    <option value="hard">Difícil (Nivel 21-30)</option>
                                    <option value="extreme">Extremo (Nivel 31+)</option>
                                </select>
                            </div>
                            <button id="create-game-btn" class="w-full mt-4 bg-green-600 hover:bg-green-700 text-white font-bold py-4 px-8 rounded-lg shadow-lg transform transition-transform duration-200 hover:scale-105">Crear Partida</button>
                            <div class="flex items-center space-x-2 my-4">
                                <div class="flex-grow border-t border-blue-600"></div>
                                <span class="text-sm text-blue-400">o</span>
                                <div class="flex-grow border-t border-blue-600"></div>
                            </div>
                            <input type="text" id="game-id-input" placeholder="ID de la partida" class="w-full p-3 border-2 border-blue-200 rounded-md text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <button id="join-game-btn" class="w-full mt-2 bg-blue-600 hover:bg-blue-700 text-white font-bold py-4 px-8 rounded-lg shadow-lg transform transition-transform duration-200 hover:scale-105">Unirse a Partida</button>
                        </div>
                        
                        <!-- Sección Práctica -->
                        <div class="bg-gray-700 p-6 rounded-lg shadow-inner">
                            <h4 class="text-2xl font-bold text-white mb-4">Modo Práctica</h4>
                            <p class="text-sm text-gray-300 mb-4">Practica solo para mejorar tus habilidades.</p>
                            <button id="practice-math-btn" class="w-full mt-4 bg-purple-600 hover:bg-purple-700 text-white font-bold py-4 px-8 rounded-lg shadow-lg transform transition-transform duration-200 hover:scale-105">Práctica de Matemáticas</button>
                            <button id="practice-english-btn" class="w-full mt-4 bg-yellow-600 hover:bg-yellow-700 text-white font-bold py-4 px-8 rounded-lg shadow-lg transform transition-transform duration-200 hover:scale-105">Práctica de Inglés</button>
                        </div>
                    </div>
                    
                    <!-- Columna Derecha: Amigos y Solicitudes -->
                    <div class="flex flex-col space-y-4">
                        <div class="bg-gray-700 p-6 rounded-lg shadow-inner">
                            <h4 class="text-2xl font-bold text-white mb-4">Tu ID de Usuario</h4>
                            <p id="user-id-display" class="break-words text-sm text-gray-300 mb-4">${userId}</p>
                            <p class="text-sm text-gray-400">Comparte este ID para que tus amigos te agreguen.</p>
                            <div class="mt-4">
                                <h4 class="text-lg font-bold text-white mb-2">Agregar Amigo</h4>
                                <input type="text" id="add-friend-id" placeholder="ID de amigo" class="w-full p-3 border-2 border-gray-500 rounded-md text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                                <button id="add-friend-btn" class="w-full mt-2 bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded-lg">Enviar Solicitud</button>
                            </div>
                        </div>

                        <div class="bg-gray-700 p-6 rounded-lg shadow-inner">
                            <h4 class="text-2xl font-bold text-white mb-4">Solicitudes de Amistad</h4>
                            <div id="friend-requests-list" class="flex flex-col space-y-2">
                                ${requestsListHtml}
                            </div>
                        </div>

                        <div class="bg-gray-700 p-6 rounded-lg shadow-inner">
                            <h4 class="text-2xl font-bold text-white mb-4">Tus Amigos</h4>
                            <div id="friends-list" class="flex flex-col space-y-2">
                                ${friendsListHtml}
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Re-adjuntar listeners de eventos
            document.getElementById('create-game-btn').addEventListener('click', createGame);
            document.getElementById('join-game-btn').addEventListener('click', joinGame);
            document.getElementById('practice-math-btn').addEventListener('click', () => renderPracticeMath());
            document.getElementById('practice-english-btn').addEventListener('click', () => renderPracticeEnglish());
            
            document.getElementById('add-friend-btn').addEventListener('click', addFriend);
            document.querySelectorAll('.accept-friend-btn').forEach(button => {
                button.addEventListener('click', (e) => acceptFriend(e.target.dataset.userId));
            });
            document.querySelectorAll('.start-chat-btn').forEach(button => {
                button.addEventListener('click', (e) => {
                    const friendId = e.target.dataset.friendId;
                    const friendName = e.target.dataset.friendName;
                    const friendGender = e.target.dataset.friendGender;
                    renderChat(friendId, friendName, friendGender);
                });
            });

            // Escuchar cambios en el perfil del usuario para actualizar la lista de amigos
            if (myProfileListenerUnsubscribe) myProfileListenerUnsubscribe();
            myProfileListenerUnsubscribe = onSnapshot(myProfileRef, (docSnap) => {
                if (docSnap.exists()) {
                    const updatedData = docSnap.data();
                    const updatedFriends = updatedData.friends || [];
                    const updatedRequests = updatedData.friendRequests || [];
                    
                    const friendsListDiv = document.getElementById('friends-list');
                    if (friendsListDiv) {
                        if (updatedFriends.length > 0) {
                             const friendsPromises = updatedFriends.map(friendId => getDoc(doc(db, `artifacts/${appId}/public/data/profiles`, friendId)));
                             Promise.all(friendsPromises).then(friendsSnapshots => {
                                 friendsListDiv.innerHTML = friendsSnapshots.map(friendSnap => {
                                     const friendData = friendSnap.data();
                                     const friendId = friendSnap.id;
                                     const profilePicUrl = getProfilePhoto(friendData.gender);
                                     return `
                                         <div class="flex items-center justify-between p-2 border-b last:border-b-0 border-gray-600">
                                             <div class="flex items-center space-x-2">
                                                 <img src="${profilePicUrl}" alt="Foto de perfil de ${friendData.name}" class="rounded-full profile-pic">
                                                 <span class="font-bold text-white">${friendData.name}</span>
                                             </div>
                                             <button class="start-chat-btn bg-blue-500 hover:bg-blue-600 text-white text-sm px-2 py-1 rounded-md" data-friend-id="${friendId}" data-friend-name="${friendData.name}" data-friend-gender="${friendData.gender}">Chatear</button>
                                         </div>
                                     `;
                                 }).join('');
                                 document.querySelectorAll('.start-chat-btn').forEach(button => {
                                     button.addEventListener('click', (e) => {
                                         const friendId = e.target.dataset.friendId;
                                         const friendName = e.target.dataset.friendName;
                                         const friendGender = e.target.dataset.friendGender;
                                         renderChat(friendId, friendName, friendGender);
                                     });
                                 });
                             });
                        } else {
                            friendsListDiv.innerHTML = '<p class="text-sm text-gray-400 text-center">No tienes amigos todavía.</p>';
                        }
                    }

                    const requestsListDiv = document.getElementById('friend-requests-list');
                    if (requestsListDiv) {
                        if (updatedRequests.length > 0) {
                            requestsListDiv.innerHTML = updatedRequests.map(req => `
                                <div class="flex items-center justify-between p-2 border-b last:border-b-0 border-gray-600">
                                    <div class="flex items-center space-x-2">
                                        <img src="${getProfilePhoto(req.gender)}" alt="Foto de perfil de ${req.name}" class="rounded-full profile-pic">
                                        <span class="text-white">${req.name}</span>
                                    </div>
                                    <button class="accept-friend-btn bg-green-500 hover:bg-green-600 text-white text-sm px-2 py-1 rounded-md" data-user-id="${req.userId}">Aceptar</button>
                                </div>
                            `).join('');
                            document.querySelectorAll('.accept-friend-btn').forEach(button => {
                                button.addEventListener('click', (e) => acceptFriend(e.target.dataset.userId));
                            });
                        } else {
                            requestsListDiv.innerHTML = '<p class="text-sm text-gray-400 text-center">No hay solicitudes pendientes.</p>';
                        }
                    }
                }
            });
        }
        
        async function addFriend() {
            const friendId = document.getElementById('add-friend-id').value.trim();
            if (!friendId || friendId === userId) {
                showMessage("ID de usuario no válido.");
                return;
            }

            const friendProfileRef = doc(db, `artifacts/${appId}/public/data/profiles`, friendId);
            const friendProfileSnap = await getDoc(friendProfileRef);

            if (friendProfileSnap.exists()) {
                const friendData = friendProfileSnap.data();
                if (friendData.friends.includes(userId)) {
                    showMessage("Ya son amigos.");
                    return;
                }
                const myProfile = { userId: userId, name: userName, gender: userGender };
                await updateDoc(friendProfileRef, {
                    friendRequests: arrayUnion(myProfile)
                });
                showMessage("Solicitud de amistad enviada.");
            } else {
                showMessage("Usuario no encontrado.");
            }
        }

        async function acceptFriend(friendId) {
            const myProfileRef = doc(db, `artifacts/${appId}/public/data/profiles`, userId);
            const friendProfileRef = doc(db, `artifacts/${appId}/public/data/profiles`, friendId);

            const myProfileSnap = await getDoc(myProfileRef);
            const myProfileData = myProfileSnap.data();
            const updatedRequests = myProfileData.friendRequests.filter(req => req.userId !== friendId);
            
            await updateDoc(myProfileRef, {
                friendRequests: updatedRequests,
                friends: arrayUnion(friendId)
            });
            await updateDoc(friendProfileRef, {
                friends: arrayUnion(userId)
            });
            showMessage("Amigo agregado con éxito.");
        }

        function renderChat(friendId, friendName, friendGender) {
            dynamicContent.innerHTML = `
                <div class="flex flex-col h-full">
                    <div class="flex items-center justify-between p-4 border-b border-gray-700 bg-gray-700 rounded-t-xl">
                        <div class="flex items-center space-x-4">
                            <img src="${getProfilePhoto(friendGender)}" alt="Foto de perfil" class="rounded-full profile-pic">
                            <h4 class="text-xl font-bold text-white">Chat con ${friendName}</h4>
                        </div>
                        <button id="back-to-lobby-btn" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transform transition-transform duration-200 hover:scale-105">Volver al Lobby</button>
                    </div>
                    <div id="chat-messages" class="flex-1 p-4 overflow-y-auto space-y-4">
                        <!-- Mensajes del chat se cargarán aquí -->
                    </div>
                    <div class="p-4 border-t border-gray-700 bg-gray-700 rounded-b-xl">
                        <div class="flex space-x-2">
                            <input type="text" id="chat-input" placeholder="Escribe un mensaje..." class="flex-1 p-3 border-2 border-gray-500 rounded-lg text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500">
                            <button id="send-chat-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transform transition-transform duration-200 hover:scale-105">Enviar</button>
                        </div>
                    </div>
                </div>
            `;
            
            document.getElementById('back-to-lobby-btn').addEventListener('click', goBackToLobby);
            document.getElementById('send-chat-btn').addEventListener('click', () => sendMessage(friendId));
            document.getElementById('chat-input').addEventListener('keydown', (e) => {
                if (e.key === 'Enter') sendMessage(friendId);
            });

            listenForChat(friendId);
        }

        async function sendMessage(friendId) {
            const chatInput = document.getElementById('chat-input');
            const messageText = chatInput.value.trim();
            if (!messageText) return;

            const chatRoomId = userId < friendId ? `${userId}_${friendId}` : `${friendId}_${userId}`;
            const chatRef = collection(db, `artifacts/${appId}/public/data/chats/${chatRoomId}/messages`);
            
            try {
                await addDoc(chatRef, {
                    senderId: userId,
                    senderName: userName,
                    message: messageText,
                    timestamp: new Date()
                });
                chatInput.value = '';
            } catch (error) {
                console.error("Error al enviar el mensaje:", error);
                showMessage("Error al enviar el mensaje.");
            }
        }

        function listenForChat(friendId) {
            if (chatListenerUnsubscribe) chatListenerUnsubscribe();

            const chatRoomId = userId < friendId ? `${userId}_${friendId}` : `${friendId}_${userId}`;
            const chatRef = collection(db, `artifacts/${appId}/public/data/chats/${chatRoomId}/messages`);
            const chatMessagesDiv = document.getElementById('chat-messages');

            chatListenerUnsubscribe = onSnapshot(chatRef, (snapshot) => {
                const messages = [];
                snapshot.forEach(doc => {
                    messages.push(doc.data());
                });
                messages.sort((a, b) => a.timestamp - b.timestamp);
                
                chatMessagesDiv.innerHTML = messages.map(msg => {
                    const isSender = msg.senderId === userId;
                    const messageClass = isSender ? 'bg-blue-500 self-end' : 'bg-gray-600 self-start';
                    const alignment = isSender ? 'text-right' : 'text-left';
                    return `
                        <div class="flex ${isSender ? 'justify-end' : 'justify-start'}">
                            <div class="max-w-xs md:max-w-md p-3 rounded-xl text-white ${messageClass}">
                                <p class="text-sm font-semibold mb-1">${msg.senderName}</p>
                                <p>${msg.message}</p>
                            </div>
                        </div>
                    `;
                }).join('');

                chatMessagesDiv.scrollTop = chatMessagesDiv.scrollHeight;
            });
        }
        
        // RENDER: Modo Práctica de Matemáticas
        function renderPracticeMath() {
            practiceState.active = true;
            practiceState.mode = 'math';
            practiceState.score = 0;
            practiceState.level = 1;
            
            dynamicContent.innerHTML = `
                <div class="flex flex-col items-center">
                    <h3 class="text-3xl font-bold text-white mb-4">Práctica de Matemáticas</h3>
                    <button id="back-to-lobby-btn" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transform transition-transform duration-200 hover:scale-105 mb-4">Volver al Lobby</button>
                    <div class="bg-gray-700 p-6 rounded-lg shadow-inner w-full max-w-sm">
                        <p class="text-lg text-white mb-2">Puntuación: <span id="practice-score">0</span></p>
                        <p class="text-lg text-white mb-4">Nivel: <span id="practice-level">1</span></p>
                        <div id="math-problem-display" class="text-4xl font-bold text-yellow-300 mb-6"></div>
                        <input type="number" id="math-answer-input" placeholder="Tu respuesta" class="w-full p-3 border-2 border-blue-200 rounded-md text-gray-700 text-center text-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <button id="check-math-answer-btn" class="w-full mt-4 bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transform transition-transform duration-200 hover:scale-105">Verificar</button>
                    </div>
                </div>
            `;
            
            document.getElementById('back-to-lobby-btn').addEventListener('click', goBackToLobby);
            document.getElementById('check-math-answer-btn').addEventListener('click', checkMathAnswer);
            document.getElementById('math-answer-input').addEventListener('keydown', (e) => {
                if (e.key === 'Enter') checkMathAnswer();
            });

            generateNewMathProblem();
        }

        function generateNewMathProblem() {
            const problemData = generateMathProblem(practiceState.level);
            practiceState.problem = problemData.problem;
            practiceState.answer = problemData.answer;
            document.getElementById('math-problem-display').textContent = problemData.problem;
            document.getElementById('math-answer-input').value = '';
            document.getElementById('math-answer-input').focus();
        }

        function checkMathAnswer() {
            const userAnswer = parseInt(document.getElementById('math-answer-input').value, 10);
            if (userAnswer === practiceState.answer) {
                practiceState.score += 10;
                practiceState.level++;
                if (practiceState.level > 10) {
                    showMessage("¡Felicitaciones! Has completado la práctica de matemáticas hasta el nivel 10.");
                    goBackToLobby();
                    return;
                }
                showMessage("¡Respuesta correcta!");
            } else {
                showMessage(`Respuesta incorrecta. La respuesta era ${practiceState.answer}.`);
            }
            document.getElementById('practice-score').textContent = practiceState.score;
            document.getElementById('practice-level').textContent = practiceState.level;
            generateNewMathProblem();
        }
        
        // RENDER: Modo Práctica de Inglés
        function renderPracticeEnglish() {
            practiceState.active = true;
            practiceState.mode = 'english';
            practiceState.score = 0;
            practiceState.level = 1;
            
            dynamicContent.innerHTML = `
                <div class="flex flex-col items-center">
                    <h3 class="text-3xl font-bold text-white mb-4">Práctica de Inglés</h3>
                    <button id="back-to-lobby-btn" class="bg-red-600 hover:bg-red-700 text-white font-bold py-2 px-4 rounded-lg transform transition-transform duration-200 hover:scale-105 mb-4">Volver al Lobby</button>
                    <div class="bg-gray-700 p-6 rounded-lg shadow-inner w-full max-w-sm">
                        <p class="text-lg text-white mb-2">Puntuación: <span id="practice-score">0</span></p>
                        <p class="text-lg text-white mb-4">Nivel: <span id="practice-level">1</span></p>
                        <div id="english-question-display" class="text-4xl font-bold text-yellow-300 mb-6"></div>
                        <div id="english-options" class="flex flex-col space-y-4">
                            <!-- Opciones se cargarán aquí -->
                        </div>
                    </div>
                </div>
            `;
            
            document.getElementById('back-to-lobby-btn').addEventListener('click', goBackToLobby);
            generateNewEnglishProblem();
        }

        function generateNewEnglishProblem() {
            const problemData = generateEnglishProblem();
            practiceState.problem = problemData.question;
            practiceState.answer = problemData.answer;
            document.getElementById('english-question-display').textContent = problemData.question;
            
            const optionsDiv = document.getElementById('english-options');
            optionsDiv.innerHTML = problemData.options.map(option => `
                <button class="english-option-btn w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transform transition-transform duration-200 hover:scale-105" data-answer="${option}">${option}</button>
            `).join('');

            document.querySelectorAll('.english-option-btn').forEach(button => {
                button.addEventListener('click', checkEnglishAnswer);
            });
        }
        
        function checkEnglishAnswer(e) {
            const userAnswer = e.target.dataset.answer;
            if (userAnswer === practiceState.answer) {
                practiceState.score += 10;
                practiceState.level++;
                 if (practiceState.level > 10) {
                    showMessage("¡Felicitaciones! Has completado la práctica de inglés hasta el nivel 10.");
                    goBackToLobby();
                    return;
                }
                showMessage("¡Respuesta correcta!");
            } else {
                showMessage(`Respuesta incorrecta. La respuesta era ${practiceState.answer}.`);
            }
            document.getElementById('practice-score').textContent = practiceState.score;
            document.getElementById('practice-level').textContent = practiceState.level;
            generateNewEnglishProblem();
        }
        
        // --- Lógica Multijugador ---
        async function createGame() {
            const mode = document.getElementById('mode-select').value;
            const difficulty = document.getElementById('difficulty-select').value;
            
            const gamesRef = collection(db, `artifacts/${appId}/public/data/games`);
            const newGameRef = await addDoc(gamesRef, {
                status: 'waiting',
                mode,
                difficulty,
                host: userId,
                players: [{ id: userId, name: userName, gender: userGender, score: 0 }],
                createdAt: new Date(),
                chat: []
            });
            currentGameId = newGameRef.id;
            renderGameRoom();
        }

        async function joinGame() {
            const gameId = document.getElementById('game-id-input').value.trim();
            if (!gameId) {
                showMessage("Por favor, introduce un ID de partida.");
                return;
            }

            const gameRef = doc(db, `artifacts/${appId}/public/data/games`, gameId);
            const gameSnap = await getDoc(gameRef);

            if (!gameSnap.exists()) {
                showMessage("Partida no encontrada.");
                return;
            }
            
            const gameData = gameSnap.data();
            if (gameData.players.some(p => p.id === userId)) {
                showMessage("Ya estás en esta partida.");
                currentGameId = gameId;
                renderGameRoom();
                return;
            }
            
            if (gameData.status !== 'waiting') {
                showMessage("Esta partida ya ha comenzado.");
                return;
            }
            
            if (gameData.players.length >= 4) {
                showMessage("Esta partida está llena.");
                return;
            }

            await updateDoc(gameRef, {
                players: arrayUnion({ id: userId, name: userName, gender: userGender, score: 0 })
            });
            
            currentGameId = gameId;
            renderGameRoom();
        }
        
        function renderGameRoom() {
            dynamicContent.innerHTML = `
                <div class="flex flex-col items-center">
                    <h3 class="text-3xl font-bold text-white mb-4">Sala de Espera</h3>
                    <p class="text-gray-300 mb-4">ID de Partida: <span class="font-mono text-yellow-300">${currentGameId}</span></p>
                    <p class="text-gray-400 mb-6">Comparte este ID con tus amigos.</p>
                    <div id="game-room-players" class="flex flex-col space-y-4 mb-6">
                        <!-- Jugadores se cargarán aquí -->
                    </div>
                    <div class="bg-gray-700 p-4 rounded-lg w-full mb-4 max-w-sm">
                        <p class="text-sm text-white mb-2">Chat de la Sala:</p>
                        <div id="game-chat-messages" class="h-24 overflow-y-auto p-2 bg-gray-800 rounded mb-2"></div>
                        <div class="flex space-x-2">
                            <input type="text" id="game-chat-input" placeholder="Escribe un mensaje..." class="flex-1 p-2 text-sm border-2 border-gray-500 rounded-md text-gray-700">
                            <button id="send-game-chat-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-1 px-3 rounded-lg">Enviar</button>
                        </div>
                    </div>
                    <div class="flex space-x-4">
                        <button id="start-game-btn" class="bg-green-600 hover:bg-green-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transform transition-transform duration-200 hover:scale-105">Empezar Partida</button>
                        <button id="back-to-lobby-btn" class="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transform transition-transform duration-200 hover:scale-105">Volver al Lobby</button>
                    </div>
                </div>
            `;
            
            document.getElementById('back-to-lobby-btn').addEventListener('click', goBackToLobby);
            document.getElementById('start-game-btn').addEventListener('click', startGame);
            document.getElementById('send-game-chat-btn').addEventListener('click', () => sendGameChatMessage());
            document.getElementById('game-chat-input').addEventListener('keydown', (e) => {
                if (e.key === 'Enter') sendGameChatMessage();
            });

            // Escuchar cambios en la partida
            if (gameListenerUnsubscribe) gameListenerUnsubscribe();
            const gameRef = doc(db, `artifacts/${appId}/public/data/games`, currentGameId);
            gameListenerUnsubscribe = onSnapshot(gameRef, (docSnap) => {
                if (docSnap.exists()) {
                    gameData = docSnap.data();
                    const playersDiv = document.getElementById('game-room-players');
                    playersDiv.innerHTML = gameData.players.map(p => {
                        return `
                            <div class="flex items-center space-x-2">
                                <img src="${getProfilePhoto(p.gender)}" alt="Foto de perfil" class="rounded-full profile-pic">
                                <span class="text-lg font-bold text-white">${p.name}</span>
                            </div>
                        `;
                    }).join('');

                    // Actualizar chat de la partida
                    const chatMessagesDiv = document.getElementById('game-chat-messages');
                    const chatHtml = gameData.chat.map(msg => {
                        return `<p class="text-sm text-white"><span class="font-bold text-yellow-300">${msg.senderName}:</span> ${msg.message}</p>`;
                    }).join('');
                    chatMessagesDiv.innerHTML = chatHtml;
                    chatMessagesDiv.scrollTop = chatMessagesDiv.scrollHeight;

                    // Si el estado cambia a 'in_progress', renderizar el juego
                    if (gameData.status === 'in_progress') {
                        renderGame();
                    }
                } else {
                    goBackToLobby();
                }
            });
        }
        
        async function sendGameChatMessage() {
            const chatInput = document.getElementById('game-chat-input');
            const message = chatInput.value.trim();
            if (!message) return;

            const gameRef = doc(db, `artifacts/${appId}/public/data/games`, currentGameId);
            await updateDoc(gameRef, {
                chat: arrayUnion({
                    senderId: userId,
                    senderName: userName,
                    message: message
                })
            });
            chatInput.value = '';
        }

        async function startGame() {
            if (gameData.host !== userId) {
                showMessage("Solo el anfitrión puede iniciar la partida.");
                return;
            }
            if (gameData.players.length < 2) {
                 showMessage("Se necesitan al menos 2 jugadores para empezar.");
                 return;
            }
            
            const gameRef = doc(db, `artifacts/${appId}/public/data/games`, currentGameId);
            await updateDoc(gameRef, { status: 'in_progress' });
        }
        
        // RENDER: Pantalla del Juego Multijugador
        function renderGame() {
             const currentPlayer = gameData.players.find(p => p.id === userId);
             
             let problemDisplay, answerInput, checkBtn;
             if (gameData.mode === 'math') {
                const problemData = generateMathProblem(10); // Generar un problema de ejemplo
                 problemDisplay = `<div id="game-problem-display" class="text-5xl font-bold text-yellow-300 mb-6">${problemData.problem}</div>`;
                 answerInput = `<input type="number" id="game-answer-input" placeholder="Tu respuesta" class="w-full p-4 border-2 border-blue-200 rounded-md text-gray-700 text-center text-2xl focus:outline-none focus:ring-2 focus:ring-blue-500">`;
                 checkBtn = `<button id="check-game-answer-btn" class="w-full mt-4 bg-green-600 hover:bg-green-700 text-white font-bold py-4 px-8 rounded-lg shadow-lg transform transition-transform duration-200 hover:scale-105">Verificar</button>`;
             } else { // english
                const problemData = generateEnglishProblem();
                 problemDisplay = `<div id="game-problem-display" class="text-5xl font-bold text-yellow-300 mb-6">${problemData.question}</div>`;
                 answerInput = `
                    <div id="game-options" class="flex flex-col space-y-4">
                        ${problemData.options.map(option => `
                            <button class="game-option-btn w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transform transition-transform duration-200 hover:scale-105" data-answer="${option}">${option}</button>
                        `).join('')}
                    </div>
                 `;
                 checkBtn = ''; // No se necesita botón de verificar para las opciones
             }

            dynamicContent.innerHTML = `
                <div class="flex flex-col items-center">
                    <h3 class="text-3xl font-bold text-white mb-4">¡A Jugar!</h3>
                    <p class="text-gray-300 mb-4">Modo: ${gameData.mode === 'math' ? 'Matemáticas' : 'Inglés'} | Dificultad: ${gameData.difficulty}</p>
                    <div class="flex justify-center space-x-8 mb-6">
                        <div class="text-center">
                            <p class="text-xl font-bold text-white">Tu Puntuación</p>
                            <p id="my-game-score" class="text-5xl font-extrabold text-green-400 mt-2">${currentPlayer.score}</p>
                        </div>
                    </div>
                    <div class="bg-gray-700 p-8 rounded-lg shadow-inner w-full max-w-lg">
                        ${problemDisplay}
                        ${answerInput}
                        ${checkBtn}
                    </div>
                    <div class="mt-8 flex space-x-4">
                        <button id="back-to-lobby-btn" class="bg-red-600 hover:bg-red-700 text-white font-bold py-3 px-6 rounded-lg shadow-lg transform transition-transform duration-200 hover:scale-105">Volver al Lobby</button>
                    </div>
                </div>
            `;
            
            document.getElementById('back-to-lobby-btn').addEventListener('click', goBackToLobby);
        }
        
        // Inicialización
        document.addEventListener('DOMContentLoaded', () => {
             // Este evento ahora solo sirve para inicializar, la autenticación y renderizado inicial se manejan con onAuthStateChanged
        });
    </script>
</body>
</html>
